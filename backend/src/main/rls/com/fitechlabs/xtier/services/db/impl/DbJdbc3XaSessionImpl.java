// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 

package com.fitechlabs.xtier.services.db.impl;

import com.fitechlabs.xtier.services.db.*;
import com.fitechlabs.xtier.utils.ArgAssert;

// Referenced classes of package com.fitechlabs.xtier.services.db.impl:
//            DbXaSessionImpl, DbSqlExecutor, DbDataSourceProps

class DbJdbc3XaSessionImpl extends DbXaSessionImpl
    implements DbJdbc3XaSession
{

    DbJdbc3XaSessionImpl(DbDataSourceProps dbdatasourceprops)
        throws DbException
    {
        super(dbdatasourceprops);
    }

    public void exec(DbStatementHandler dbstatementhandler, int i, int j, int k)
        throws DbException
    {
        ArgAssert.nullArg(dbstatementhandler, "handler");
        checkParams(i, j, k);
        init();
        executor.exec(dbstatementhandler, i, j, k);
    }

    public DbRow insert(String s, DbSqlParams dbsqlparams, String as[])
        throws DbException
    {
        ArgAssert.nullArg(s, "sql");
        ArgAssert.nullArg(as, "autogenCols");
        init();
        return executor.insert(s, dbsqlparams, as);
    }

    public DbRow insert(String s, DbSqlParams dbsqlparams, int ai[])
        throws DbException
    {
        ArgAssert.nullArg(s, "sql");
        ArgAssert.nullArg(ai, "autogenCols");
        init();
        return executor.insert(s, dbsqlparams, ai);
    }

    public void exec(String s, DbPreparedStatementHandler dbpreparedstatementhandler, int i, int j, int k)
        throws DbException
    {
        ArgAssert.nullArg(s, "sql");
        ArgAssert.nullArg(dbpreparedstatementhandler, "handler");
        checkParams(i, j, k);
        init();
        executor.exec(s, dbpreparedstatementhandler, i, j, k);
    }

    public void exec(String s, DbPreparedStatementHandler dbpreparedstatementhandler, int ai[])
        throws DbException
    {
        ArgAssert.nullArg(s, "sql");
        ArgAssert.nullArg(dbpreparedstatementhandler, "handler");
        ArgAssert.nullArg(ai, "autogenCols");
        init();
        executor.exec(s, dbpreparedstatementhandler, ai);
    }

    public void exec(String s, DbPreparedStatementHandler dbpreparedstatementhandler, String as[])
        throws DbException
    {
        ArgAssert.nullArg(s, "sql");
        ArgAssert.nullArg(dbpreparedstatementhandler, "handler");
        ArgAssert.nullArg(as, "autogenCols");
        init();
        executor.exec(s, dbpreparedstatementhandler, as);
    }

    public void exec(String s, DbPreparedStatementHandler dbpreparedstatementhandler, int i)
        throws DbException
    {
        ArgAssert.nullArg(s, "sql");
        ArgAssert.nullArg(dbpreparedstatementhandler, "handler");
        ArgAssert.illegalArg(i == 1 || i == 2, "autoGeneratedKeys");
        init();
        executor.exec(s, dbpreparedstatementhandler, i);
    }

    public void exec(String s, DbCallableStatementHandler dbcallablestatementhandler, int i, int j, int k)
        throws DbException
    {
        ArgAssert.nullArg(s, "sql");
        ArgAssert.nullArg(dbcallablestatementhandler, "handler");
        checkParams(i, j, k);
        init();
        executor.exec(s, dbcallablestatementhandler, i, j, k);
    }

    private void checkParams(int i, int j, int k)
    {
        checkParams(i, j);
        ArgAssert.illegalArg(k == 1 || k == 2, "rsHold");
    }
}
